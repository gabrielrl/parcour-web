{"version":3,"sources":["add-doorway-step.spec.ts"],"names":[],"mappings":"AAAA,+DAA+D;AAE/D,gBAAgB;AAEhB,IAAU,IAAI,CA6Fb;AA7FD,WAAU,IAAI;IAAC,IAAA,KAAK,CA6FnB;IA7Fc,WAAA,KAAK;QAOlB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAEzB,QAAQ,CAAC,gBAAgB,EAAE;YAEzB,EAAE,CAAC,YAAY,EAAE;gBAEf,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;qBAC1B,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;qBAClC,CAAC,CAAC,UAAU,CAAC,CAAC;YAEnB,CAAC,CAAC,CAAC;YAEH,8BAA8B;YAC9B,kEAAkE;YAElE,8BAA8B;YAC9B,0BAA0B;YAC1B,4BAA4B;YAE5B,4BAA4B;YAC5B,mCAAmC;YACnC,+BAA+B;YAC/B,iCAAiC;YACjC,QAAQ;YAER,4CAA4C;YAC5C,mDAAmD;YACnD,4DAA4D;YAC5D,oDAAoD;YACpD,sDAAsD;YACtD,QAAQ;YAER,4DAA4D;YAC5D,mDAAmD;YACnD,kEAAkE;YAClE,QAAQ;YAER,qCAAqC;YACrC,wCAAwC;YACxC,wDAAwD;YACxD,2CAA2C;YAC3C,uDAAuD;YACvD,2DAA2D;YAC3D,QAAQ;YAER,MAAM;YAEN,oDAAoD;YACpD,+DAA+D;YAE/D,8BAA8B;YAC9B,yBAAyB;YACzB,2CAA2C;YAC3C,MAAM;YACN,8BAA8B;YAC9B,0BAA0B;YAC1B,4BAA4B;YAE5B,4BAA4B;YAC5B,uCAAuC;YACvC,+BAA+B;YAC/B,iCAAiC;YACjC,QAAQ;YAER,6DAA6D;YAC7D,mDAAmD;YACnD,oEAAoE;YACpE,OAAO;YAEP,iDAAiD;YACjD,iDAAiD;YACjD,oDAAoD;YACpD,iEAAiE;YACjE,QAAQ;YAER,qCAAqC;YACrC,wCAAwC;YACxC,wDAAwD;YACxD,2CAA2C;YAC3C,uDAAuD;YACvD,2DAA2D;YAC3D,QAAQ;YAER,MAAM;QAER,CAAC,CAAC,CAAC;IACL,CAAC,EA7Fc,KAAK,GAAL,UAAK,KAAL,UAAK,QA6FnB;AAAD,CAAC,EA7FS,IAAI,KAAJ,IAAI,QA6Fb;AAGD,QAAQ","file":"add-doorway-step.spec.js","sourcesContent":["/// <reference path=\"../src/ts/defs/prkr-editor.bundle.d.ts\" />\r\n\r\n// (function() {\r\n\r\nnamespace PRKR.Tests {\r\n\r\n  import Parcour = PRKR.Model.Parcour;\r\n  import Doorway = PRKR.Model.Doorway;\r\n  import DoorwayData = PRKR.Model.DoorwayData;\r\n  import StepResult = PRKR.Editor.EditSteps.StepResult;\r\n\r\n  let expect = chai.expect;\r\n\r\n  describe('AddDoorwayStep', function() {\r\n\r\n    it('is defined', function() {\r\n\r\n      expect(PRKR.Editor.EditSteps)\r\n        .to.have.property('AddDoorwayStep')\r\n        .a('Function');\r\n\r\n    });\r\n\r\n    // NOT SURE THIS CAN BE VALID.\r\n    // describe('without parameters on an empty parcour', function() {\r\n\r\n    //   let step: AddDoorwayStep;\r\n    //   let parcour: Parcour;\r\n    //   let result: StepResult;\r\n\r\n    //   beforeEach(function() {\r\n    //     step = new AddDoorwayStep();\r\n    //     parcour = new Parcour();\r\n    //     result = step.do(parcour);\r\n    //   });\r\n\r\n    //   it('adds a doorway to it', function() {\r\n    //     expect(parcour.objects).to.have.lengthOf(1);\r\n    //     expect(parcour.objects[0]).to.be.instanceof(Doorway);\r\n    //     expect(parcour.objects[0].id).not.to.be.null;\r\n    //     expect(parcour.objects[0].id).not.to.equal('');\r\n    //   });\r\n\r\n    //   it('returns the appropriate \"StepResult\"', function() {\r\n    //     expect(result.dirtyIds).to.have.lengthOf(1);\r\n    //     expect(result.dirtyIds[0]).to.equal(parcour.objects[0].id);\r\n    //   });\r\n\r\n    //   it('can be undone', function() {\r\n    //     let doorway = parcour.objects[0];\r\n    //     let undoResult = step.undo(parcour, result.data);\r\n    //     expect(parcour.objects).to.be.empty;\r\n    //     expect(undoResult.dirtyIds).to.have.lengthOf(1);\r\n    //     expect(undoResult.dirtyIds[0]).to.equal(doorway.id);\r\n    //   });\r\n\r\n    // });\r\n\r\n    // NEVER VALID ON AN EMPTY PARCOUR. IT NEEDS A ROOM.\r\n    // describe('with parameters on an empty parcour', function() {\r\n\r\n    //   let data: DoorwayData = {\r\n    //     areaId: 'area-id',\r\n    //     location: new THREE.Vector3(1, 2, 3)\r\n    //   }\r\n    //   let step: AddDoorwayStep;\r\n    //   let parcour: Parcour;\r\n    //   let result: StepResult;\r\n\r\n    //   beforeEach(function() {\r\n    //     step = new AddDoorwayStep(data);\r\n    //     parcour = new Parcour();\r\n    //     result = step.do(parcour);\r\n    //   });\r\n\r\n    //   it('adds a Doorway object to the parcour', function () {\r\n    //     expect(parcour.objects).to.have.lengthOf(1);\r\n    //     expect(parcour.objects[0]).to.be.instanceof(Doorway);        \r\n    //   })\r\n\r\n    //   it('with the appropriate data', function() {\r\n    //     let doorway = <Doorway>parcour.objects[0];\r\n    //     expect(doorway.areaId).to.equal(data.areaId);\r\n    //     expect(doorway.location.equals(data.location)).to.be.true;\r\n    //   });\r\n\r\n    //   it('can be undone', function() {\r\n    //     let doorway = parcour.objects[0];\r\n    //     let undoResult = step.undo(parcour, result.data);\r\n    //     expect(parcour.objects).to.be.empty;\r\n    //     expect(undoResult.dirtyIds).to.have.lengthOf(1);\r\n    //     expect(undoResult.dirtyIds[0]).to.equal(doorway.id);\r\n    //   });\r\n\r\n    // });\r\n  \r\n  });\r\n}\r\n\r\n\r\n// })();"]}