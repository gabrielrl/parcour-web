{"version":3,"sources":["parcour-object.spec.ts"],"names":[],"mappings":"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","file":"parcour-object.spec.js","sourcesContent":["/// <reference path=\"../src/ts/defs/prkr.bundle.d.ts\" />\r\n\r\nnamespace PRKR.Tests {\r\n  import ParcourObject = PRKR.Model.ParcourObject;\r\n  import ParcourObjectData = PRKR.Model.ParcourObjectData;\r\n  import RoomArea = PRKR.Model.RoomArea;\r\n  import Doorway = PRKR.Model.Doorway;\r\n  import uuid = PRKR.Utils.uuid;\r\n\r\n  let expect = chai.expect;\r\n\r\n  describe('ParcourObject', function() {\r\n\r\n    describe('.fromObject()', function() {\r\n      it('is defined', function() {\r\n        expect(ParcourObject)\r\n          .to.have.property('fromObject').a('Function');\r\n      });\r\n\r\n      it('throws if data is null', function() {\r\n        expect(function() {\r\n          ParcourObject.fromObject(null);\r\n        }).to.throw();\r\n      });\r\n\r\n      it('throws if data is empty', function() {\r\n        expect(function() {\r\n          ParcourObject.fromObject({});\r\n        }).to.throw();\r\n      });\r\n\r\n      it('allow to instantiate a `RoomArea`', function() {\r\n        let data = {\r\n          $type: 'RoomArea',\r\n          id: uuid(),\r\n          location: [1, 2, 3],\r\n          size: [4, 5, 6]\r\n        };\r\n        let instance = ParcourObject.fromObject(data);\r\n        expect(instance).to.be.instanceof(RoomArea);\r\n        let room = <RoomArea>instance;\r\n        expect(room.id).to.equal(data.id);\r\n        expect(room.location.toArray()).to.have.ordered.members(data.location);\r\n        expect(room.size.toArray()).to.have.ordered.members(data.size);\r\n      });\r\n\r\n      it('allow to instantiate a `Doorway`', function() {\r\n        let data = {\r\n          $type: 'Doorway',\r\n          id: uuid(),\r\n          areaId: uuid(),\r\n          location: [1, 2, 3],\r\n          size: [4, 5]\r\n        };\r\n        let instance = ParcourObject.fromObject(data);\r\n        expect(instance).to.be.instanceof(Doorway);\r\n        let doorway = <Doorway>instance;\r\n        expect(doorway.id).to.equal(data.id);\r\n        expect(doorway.areaId).to.equal(data.areaId);\r\n        expect(doorway.location.toArray()).to.have.ordered.members(data.location);\r\n        expect(doorway.size.toArray()).to.have.ordered.members(data.size);\r\n      });\r\n      \r\n    });\r\n\r\n  });\r\n}"]}