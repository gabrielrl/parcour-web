{"version":3,"sources":["doorway.spec.ts"],"names":[],"mappings":"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","file":"doorway.spec.js","sourcesContent":["/// <reference path=\"../src/ts/defs/prkr-editor.bundle.d.ts\" />\r\n\r\nnamespace PRKR.Tests {\r\n  \r\n  import Doorway = PRKR.Model.Doorway;\r\n  import DoorwayData = PRKR.Model.DoorwayData;\r\n\r\n  let expect = chai.expect;\r\n\r\n  describe('Doorway', function() {\r\n    it('has a default constructor', function() {\r\n      let d = new Doorway();\r\n      expect(d).not.to.be.null;\r\n      expect(d.id).not.to.be.null;\r\n      expect(d.id).not.to.be.empty;\r\n    });\r\n\r\n    describe('constructor (with data)', function() {\r\n\r\n      let id: string;\r\n      let areaId: string;\r\n      let location: THREE.Vector3;\r\n      let doorway: Doorway;\r\n\r\n      beforeEach(function() {\r\n        id = PRKR.Utils.uuid();\r\n        areaId = PRKR.Utils.uuid();\r\n        location = new THREE.Vector3(1, 2, 3);\r\n        doorway = new Doorway({\r\n          id: id,\r\n          areaId: areaId,\r\n          location: location\r\n        });\r\n      });\r\n\r\n      it('allows to set `id`', function() {\r\n        expect(doorway.id).to.equal(id);\r\n      });\r\n\r\n      it('allows to set `areaId`', function() {\r\n        expect(doorway.areaId).to.equal(areaId);\r\n      });\r\n\r\n      it('allows to set `location`', function() {\r\n        expect(doorway.location.equals(location)).to.be.true;\r\n      });\r\n    });\r\n\r\n    describe('.toObject()', function() {\r\n      it('is defined', function() {\r\n        expect(new Doorway().toObject).to.be.a('Function');\r\n      });\r\n\r\n      describe('used on an empty object, it', function() {\r\n\r\n        var doorway: Doorway;\r\n        var doorwayObject: any;\r\n\r\n        beforeEach(function() {\r\n\r\n          doorway = new Doorway();\r\n          doorwayObject = doorway.toObject();\r\n\r\n        });\r\n\r\n        it('declares the type', function() {\r\n          expect(doorwayObject)\r\n            .to.have.property('$type').equal('Doorway');\r\n        });\r\n\r\n        it('declares the size', function() {\r\n          expect(doorwayObject.size)\r\n            .to.have.ordered.members([0, 0]);\r\n        });\r\n\r\n        it('declares the `areaId`', function() {\r\n          expect(doorwayObject)\r\n            .to.have.property('id')\r\n            .equal(doorway.id);\r\n        });\r\n\r\n        it('declares the `location`', function() {\r\n          expect(doorwayObject)\r\n            .to.have.property('location')\r\n            .which.has.ordered.members([0, 0, 0]);\r\n        });\r\n\r\n        it('declares the `id`', function() {\r\n          expect(doorwayObject)\r\n            .to.have.property('id')\r\n            .which.equals(doorwayObject.id);\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('.toJson()', function() {\r\n      it('is defined', function() {\r\n        expect(new Doorway())\r\n          .to.have.property('toJson')\r\n          .a('Function');\r\n      });\r\n\r\n      it('works as expected', function() {\r\n        let doorway = new Doorway({\r\n          areaId: PRKR.Utils.uuid(),\r\n          location: new THREE.Vector3(1, 2, 3),\r\n          size: new THREE.Vector2(2, 4)\r\n        });\r\n        expect(doorway.toJson())\r\n          .to.equal(JSON.stringify(doorway.toObject()));\r\n      });\r\n    });\r\n  });\r\n}"]}