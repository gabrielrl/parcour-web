{"version":3,"sources":["parcour-validator.spec.ts"],"names":[],"mappings":"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","file":"parcour-validator.spec.js","sourcesContent":["namespace PRKR.Tests {\r\n\r\n  var expect = chai.expect;\r\n\r\n  import Parcour = PRKR.Model.Parcour;\r\n  import RoomArea = PRKR.Model.RoomArea;\r\n  import Doorway = PRKR.Model.Doorway;\r\n  import ParcourValidator = PRKR.Validators.ParcourValidator;\r\n  import ResultLevel = PRKR.Validators.ResultLevel;\r\n  import Vector3 = THREE.Vector3;\r\n\r\n  describe('ParcourValidator', function() {\r\n    it('is defined', function() {\r\n      expect(ParcourValidator).to.exist;\r\n    });\r\n\r\n    it('can be instanciated', function() {\r\n      expect(new ParcourValidator()).to.exist\r\n        .and.to.be.instanceof(ParcourValidator);\r\n    });\r\n\r\n    describe('.validate()', function() {\r\n      it('is defined', function() {\r\n        expect(new ParcourValidator()).to.have.property('validate').a('function');\r\n      });\r\n\r\n      it('has nothing to report on an empty parcour', function() {\r\n        var results = new ParcourValidator().validate(new Parcour());\r\n        expect(results).to.exist.and.be.empty;\r\n      });\r\n\r\n      describe('area validation', function() {\r\n\r\n        describe('collision detection', function() {\r\n\r\n          it('ignores contiguous areas', function() {\r\n            let parcour = new Parcour();\r\n            let size = new Vector3(2, 2, 2);\r\n            let objects = parcour.objects;\r\n            objects.push(new RoomArea({\r\n              size: size,\r\n              location: new Vector3(0, 0, 0)\r\n            }));\r\n            objects.push(new RoomArea({\r\n              size: size,\r\n              location: new Vector3(2, 0, 0)\r\n            }));\r\n            objects.push(new RoomArea({\r\n              size: size,\r\n              location: new Vector3(0, 0, 2)\r\n            }));\r\n            objects.push(new RoomArea({\r\n              size: size,\r\n              location: new Vector3(2, 0, 2)\r\n            }));\r\n            objects.push(new RoomArea({\r\n              size: size,\r\n              location: new Vector3(0, 2, 0)\r\n            }));\r\n            objects.push(new RoomArea({\r\n              size: size,\r\n              location: new Vector3(2, 2, 0)\r\n            }));\r\n            objects.push(new RoomArea({\r\n              size: size,\r\n              location: new Vector3(0, 2, 2)\r\n            }));\r\n             objects.push(new RoomArea({\r\n              size: size,\r\n              location: new Vector3(2, 2, 2)\r\n            }));\r\n\r\n            let validator = new ParcourValidator();\r\n            let results = validator.validate(parcour);\r\n\r\n            expect(results).to.exist.and.be.empty;     \r\n          });\r\n\r\n          it('reports area collisions', function() {\r\n            let parcour = new Parcour();\r\n            let objects = parcour.objects;\r\n            objects.push(new RoomArea({\r\n              size: new Vector3(2, 2, 2),\r\n              location: new Vector3()\r\n            }));\r\n            objects.push(new RoomArea({\r\n              size: new Vector3(2, 2, 2),\r\n              location: new Vector3(1, 1, 1)\r\n            }));\r\n\r\n            let validator = new ParcourValidator();\r\n            let results = validator.validate(parcour);\r\n\r\n            expect(results).to.not.be.empty;\r\n            expect(results.length).to.equal(1);\r\n            var result = results[0];\r\n            expect(result.level).to.equal(ResultLevel.Error);\r\n            expect(result.code).to.equal('area-collision'); // TODO extract\r\n            expect(result).to.be.instanceof(PRKR.Validators.AreaCollisionResult);\r\n            let collisionResult = <PRKR.Validators.AreaCollisionResult>result;\r\n            var collision = collisionResult.collision;\r\n            expect(collision).to.not.be.null;\r\n            expect(collision.areas).to.not.be.empty;\r\n            expect(collision.areas).to.contain(parcour.objects[0]);\r\n            expect(collision.areas).to.contain(parcour.objects[1]);\r\n            expect(collision.box).to.not.be.null;\r\n            expect(collision.box.min.x).to.equal(1);\r\n            expect(collision.box.min.y).to.equal(1);\r\n            expect(collision.box.min.z).to.equal(1);\r\n            expect(collision.box.max.x).to.equal(2);\r\n            expect(collision.box.max.y).to.equal(2);\r\n            expect(collision.box.max.z).to.equal(2);\r\n          });\r\n\r\n        });\r\n\r\n      });\r\n\r\n      // describe('room validation', function() {\r\n      //   it('')\r\n      // });\r\n\r\n      describe('doorway validation', function() {\r\n        it('report doorways that are not placed on walls', function() {\r\n          let parcour = new Parcour();\r\n          let objects = parcour.objects;\r\n          let area = new RoomArea({\r\n            size: new Vector3(2, 2, 2),\r\n            location: M.Vector3.Zero\r\n          });\r\n          let doorway = new Doorway({\r\n            areaId: area.id,\r\n            location: new Vector3(1, 0, 1)\r\n          });\r\n          objects.push(area, doorway);\r\n\r\n          let validator = new ParcourValidator();\r\n          let result = validator.validate(parcour);\r\n\r\n          expect(result.length).to.be.greaterThan(0);\r\n\r\n          // TODO MORE VALIDATIONS\r\n          // TODO NEEDS A CUSTOM VALIDATION ERROR TYPE.\r\n          // ...\r\n\r\n        });\r\n\r\n        it('doesn\\'t complain if a doorway is on a wall', function() {\r\n          let parcour = new Parcour();\r\n          let objects = parcour.objects;\r\n          let area = new RoomArea({\r\n            size: new Vector3(2, 2, 2),\r\n            location: M.Vector3.Zero\r\n          });\r\n          let doorway = new Doorway({\r\n            areaId: area.id,\r\n            location: new Vector3(0.5, 0, 0)\r\n          });\r\n          objects.push(area, doorway);\r\n\r\n          let validator = new ParcourValidator();\r\n          let result = validator.validate(parcour);\r\n\r\n          expect(result).to.have.lengthOf(0);\r\n        });\r\n      });\r\n\r\n    });\r\n\r\n  });\r\n}"]}